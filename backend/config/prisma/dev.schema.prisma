//! ------------ METADEFINITION -------------

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "@generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//! --------------- PSN GAMES ---------------

model Game {
  // Game attributes
  id              String @id
  title           String @unique
  titleUrl        String
  platform        String
  trophyAmount    Int
  groupAmount     Int
  definedTrophies Json

  // Relationships
  trophyGroups TrophyGroup[]
  roadmap      Roadmap?      @relation(fields: [roadmapId], references: [id])

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relation Metadata
  userGames UserGame[]
  roadmapId String?    @unique
}

model TrophyGroup {
  // Group attributes
  title         String
  titleUrl      String
  trophySummary Json
  groupIndex    String

  // Relationships
  trophies Trophy[]

  // Metadata
  id String @id @default(uuid())

  // Relation Metadata
  game              Game?               @relation(fields: [gameId], references: [id])
  gameId            String?
  earnedTrophyGroup EarnedTrophyGroup[]
}

model Trophy {
  // Trophy attributes
  name        String
  description String
  type        String
  isHidden    Boolean
  titleUrl    String
  trophyIndex Int

  // Roadmap attributes
  note       String?
  guide      String?
  isMissable Boolean?
  isGlitched Boolean?
  isOnline   Boolean?

  // Metadata
  id String @id @default(uuid())

  // Relation Metadata
  trophyGroup   TrophyGroup?   @relation(fields: [trophyGroupId], references: [id])
  trophyGroupId String?
  roadmapStep   RoadmapStep?   @relation(fields: [roadmapStepId], references: [id])
  roadmapStepId String?
  earnedTrophy  EarnedTrophy[]
}

//! ---------------- ROADMAPS ---------------

model Roadmap {
  // Roadmap attributes
  difficulty               Int
  offlineTrophies          Json
  onlineTrophies           Json
  estimatedTimeFrom        Int
  estimatedTimeTo          Int
  minPlaythroughts         Int
  missableTrophies         Int
  glitchedTrophies         Int
  difficultyAffectTrophies Boolean
  introduction             String

  // Relationships
  steps RoadmapStep[]

  // Metadata
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relation Metadata
  Game Game?
}

model RoadmapStep {
  // Roadmap step attributes
  title       String
  step        Int
  description String

  // Metadata
  id String @id @default(uuid())

  // Relationships
  achievedTrophies Trophy[]

  // Relation Metadata
  roadmap   Roadmap? @relation(fields: [roadmapId], references: [id])
  roadmapId String?
}

//! ---------------- ACCOUNTS ---------------

model Account {
  // Account attributes
  email    String   @unique
  username String?  @unique
  password String
  payload  Json
  tokens   String[]

  // Relationships
  psnUser PsnUser? @relation(fields: [psnUserId], references: [id])

  // Metadata
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relation Metadata
  psnUserId String? @unique
}

model PsnUser {
  // User attributes
  id          String  @id
  onlineId    String  @unique
  firstName   String
  lastName    String
  country     String
  language    String
  isPlusUser  Boolean
  isVerified  Boolean
  avatarUrl   String
  trophyLevel Int
  progress    Int
  tier        Int
  trophyStats Json

  // Relationships
  account Account?
  games   UserGame[]
}

//! ------------ EARNED TROPHIES ------------
model UserGame {
  // User game attributes
  id             String @id
  earnedTrophies Json

  // Relationships
  trophyGroups EarnedTrophyGroup[]
  game         Game                @relation(fields: [gameId], references: [id])

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relation Metadata
  gameId    String
  psnUser   PsnUser? @relation(fields: [psnUserId], references: [id])
  psnUserId String?
}

model EarnedTrophyGroup {
  // Earned trophy group attributes
  progress       Int
  earnedTrophies Json

  // Relationships
  trophies    EarnedTrophy[]
  trophyGroup TrophyGroup    @relation(fields: [trophyGroupId], references: [id])

  // Metadata
  id String @id @default(uuid())

  // Relation Metadata
  userGame      UserGame? @relation(fields: [userGameId], references: [id])
  userGameId    String?
  trophyGroupId String
}

model EarnedTrophy {
  // Earned trophy attributes
  earnedRate Int
  rarity     Int
  earnedAt   DateTime

  // Relationships
  trophy Trophy @relation(fields: [trophyId], references: [id])

  // Metadata
  id String @id @default(uuid())

  // Relation Metadata
  earnedTrophyGroup   EarnedTrophyGroup? @relation(fields: [earnedTrophyGroupId], references: [id])
  earnedTrophyGroupId String?
  trophyId            String
}
